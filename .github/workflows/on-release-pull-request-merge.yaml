name: On Release Pull Request Open

on:
  pull_request:
    types: [closed]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
  packages: write

jobs:
  determine_app_version:
    name: Determine app version
    if: startsWith(github.head_ref, 'release') && contains(github.event.pull_request.labels.*.name, 'release') && github.event.pull_request.merged
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.determine_app_version.outputs.app_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install semver js-yaml
      - name: Determine app version
        id: determine_app_version
        uses: actions/github-script@v6
        with:
          result-encoding: string
          retries: 3
          script: |
            const semver = require('semver');
            const yaml = require('js-yaml');
            const fs = require('fs');
            
            const versionFile = yaml.load(fs.readFileSync('version.yaml', 'utf8'));
            const latestVersion = semver.clean(versionFile[':version'][':current']);
            console.log('Latest release: ', latestVersion);
            
            // parse level from labels
            let level;
            context.payload.pull_request.labels.forEach(label => {
              if (label.name.startsWith('level:')) {
                level = label.name.split(':')[1];
              }
            });
            
            console.log('Level: ', level);

            const nextVersion = semver.inc(latestVersion, level);
            console.log('Next release: ', nextVersion);

            core.setOutput('previous_app_version', latestVersion)
            core.setOutput('app_version', nextVersion)
#  commit_version_file:
  build_and_push_image:
    name: Image
    needs: determine_app_version
    uses: ./.github/workflows/build-and-push-docker-image.yml
    secrets: inherit
    concurrency:
      group: ${{ github.event.pull_request.head.ref }} # A single build running per branch
      cancel-in-progress: true
    with:
      app_version: ${{ needs.determine_app_version.outputs.app_version }}
      commit_sha: ${{ github.event.pull_request.head.sha }}
      base_sha: ${{ github.event.pull_request.base.sha }}
      stage: release
