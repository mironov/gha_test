name: Open Release Pull Request

on:
  workflow_dispatch:
    inputs:
      level:
        required: true
        type: choice
        description: 'What version are we bumping to?'
        default: patch
        options:
          - major
          - minor
          - patch
      release_name:
        type: string
        description: 'Does this release have a name? Ex. Seymour'
      release_notes_url:
        type: string
        description: 'Does this release have a release notes url?'
      notify_users_to_refresh:
        required: true
        type: choice
        description: 'Should we notify users to refresh? How urgently?'
        default: 'No refresh required'
        options:
          - 'Notify users to refresh ASAP ("immediate")'
          - 'Notify users to refresh at their convenience ("unobtrusive")'
          - 'No refresh required'

permissions:
  contents: write
  pull-requests: write
  issues: write
  packages: write

jobs:
  create_pull_request:
    name: Create pull request
    runs-on: ubuntu-latest
    outputs:
      pull_request: ${{ steps.create_pull_request.outputs.pull_request }}
    steps:
      - name: Create pull request
        id: create_pull_request
        uses: actions/github-script@v6
        with:
          script: |
            // Exit if not a release branch
            if (!'${{ github.ref_name }}'.startsWith('release-')) {
              core.setFailed('Not a release branch');
              return;
            }
            
            // Exit if PR already exists
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: '${{ github.ref_name }}',
              base: 'main',
              state: 'open',
            });
            
            if (pullRequests.length > 0) {
              core.setFailed('Pull request for this release already exists');
              return;
            }
            
            // Parse urgency
            const notifyUsersToRefresh = '${{ github.event.inputs.notify_users_to_refresh }}';
            const notifyUsersToRefreshMap = {
              'Notify users to refresh ASAP ("immediate")': 'immediate',
              'Notify users to refresh at their convenience ("unobtrusive")': 'unobtrusive',
              'No refresh required': 'none',
            };
            const urgency = notifyUsersToRefreshMap[notifyUsersToRefresh];
            
            const capitalize = (string) => {
              return string.charAt(0).toUpperCase() + string.slice(1);
            };
            
            let title = `${capitalize('${{ github.event.inputs.level }}')} Release`;
            if ('${{ github.event.inputs.release_name }}' !== '') {
              title += ' - ${{ github.event.inputs.release_name }}';
            }
            
            let body = `The refresh requirement is set to **${urgency}**.\n\n`;
            if ('${{ github.event.inputs.release_notes_url }}' !== '') {
                body += 'Please see the release notes for more information.\n' +
                        'Release notes: ${{ github.event.inputs.release_notes_url }}\n\n';
            }
            body += 'Deployer: @${{ github.actor }}';
            
            // Create a pull request
            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              head: '${{ github.ref_name }}',
              base: 'main',
              body: body,
            });
            
            // Add labels to the pull request
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pullRequest.number,
              labels: ['release', `urgency:${urgency}`, `level:${{ github.event.inputs.level }}`],
            });
            
            // Set PR outputs
            core.setOutput('pull_request', pullRequest);
            core.setOutput('pull_request_number', pullRequest.number);
            core.setOutput('pull_request_head_sha', pullRequest.head.sha);
            core.setOutput('pull_request_head_ref', pullRequest.head.ref);
            core.setOutput('pull_request_title', pullRequest.title);
  determine_app_version:
    name: Determine app version
    runs-on: ubuntu-latest
    needs: create_pull_request
    outputs:
      app_version: ${{ steps.determine_app_version.outputs.app_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.create_pull_request.outputs.pull_request.head.ref }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install semver js-yaml
      - name: Determine app version
        id: determine_app_version
        uses: actions/github-script@v6
        with:
          result-encoding: string
          retries: 3
          script: |
            const semver = require('semver');
            const yaml = require('js-yaml');
            const fs = require('fs');
            
            const versionFile = yaml.load(fs.readFileSync('version.yaml', 'utf8'));
            const latestVersion = semver.clean(versionFile[':version'][':current']);
            console.log('Latest release: ', latestVersion);
            
            const short_sha = '${{ needs.create_pull_request.outputs.pull_request.head.sha }}'.substring(0, 11);
          
            let nextVersion = semver.inc(latestVersion, '${{ github.event.inputs.level }}');
            nextVersion += `-rc-${short_sha}`;
            
            console.log('Next RC version: ', nextVersion);
            
            core.setOutput('app_version', nextVersion)
  build_and_push_image:
    name: Image
    needs: [create_pull_request, determine_app_version]
    uses: ./.github/workflows/build-and-push-docker-image.yml
    secrets: inherit
    concurrency:
      group: ${{ needs.create_pull_request.outputs.pull_request.head.ref }} # A single build running per branch
      cancel-in-progress: true
    with:
      app_version: ${{ needs.determine_app_version.outputs.app_version }}
      commit_sha: ${{ github.sha }}
      cache_tag: pr-${{ needs.create_pull_request.outputs.pull_request.number }}
      push_to_production: true
      stage: rc
  generate_summary:
    name: Generate summary
    needs: [determine_app_version, build_and_push_image, create_pull_request]
    runs-on: ubuntu-latest
    steps:
      - name: Generate summary
        run: |
          echo "Pull Request for [${{ needs.create_pull_request.outputs.pull_request.title }}](https://github.com/${{ github.repository }}/pull/${{ needs.create_pull_request.outputs.pull_request.number }}) has been created ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "Image tagged **v${{ needs.determine_app_version.outputs.app_version }}** has been built and pushed to the registry." >> $GITHUB_STEP_SUMMARY
