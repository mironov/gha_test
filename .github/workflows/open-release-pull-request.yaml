name: Open Release Pull Request

on:
  workflow_dispatch:
    inputs:
      level:
        required: true
        type: choice
        description: 'What version are we bumping to?'
        default: patch
        options:
          - major
          - minor
          - patch
      release_name:
        type: string
        description: 'Does this release have a name? Ex. Seymour'
      release_notes_url:
        type: string
        description: 'Does this release have a release notes url?'
      notify_users_to_refresh:
        required: true
        type: choice
        description: 'Should we notify users to refresh? How urgently?'
        default: 'No refresh required'
        options:
          - 'Notify users to refresh ASAP ("immediate")'
          - 'Notify users to refresh at their convenience ("unobtrusive")'
          - 'No refresh required'

permissions:
  contents: write
  pull-requests: write
  issues: write
  packages: write

jobs:
  create_pull_request:
    name: Create pull request
    runs-on: ubuntu-latest
    outputs:
      number: ${{ steps.create_pull_request.outputs.pull_request_number }}
      head_sha: ${{ steps.create_pull_request.outputs.pull_request_head_sha }}
      head_ref: ${{ steps.create_pull_request.outputs.pull_request_head_ref }}
      title: ${{ steps.create_pull_request.outputs.pull_request_title }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install semver js-yaml @actions/core @actions/github
      - name: Create pull request
        id: create_pull_request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./.github/workflows/scripts/create_release_pull_request.mjs \
            --level '${{ github.event.inputs.level }}' \
            --release-name '${{ github.event.inputs.release_name }}' \
            --release-notes-url '${{ github.event.inputs.release_notes_url }}' \
            --notify-users-to-refresh '${{ github.event.inputs.notify_users_to_refresh }}'
  determine_app_version:
    name: Determine app version
    runs-on: ubuntu-latest
    needs: create_pull_request
    outputs:
      app_version: ${{ steps.determine_app_version.outputs.app_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.create_pull_request.outputs.head_ref }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install semver js-yaml @actions/core @actions/github
      - name: Determine app version
        id: determine_app_version
        run: |
          ./.github/workflows/scripts/determine_app_version.mjs \
            --level ${{ github.event.inputs.level }} \
            --commit-sha ${{ needs.create_pull_request.outputs.head_sha }}
  build_image:
    name: Image
    needs: [create_pull_request, determine_app_version]
    uses: ./.github/workflows/build-and-push-docker-image.yml
    secrets: inherit
    concurrency:
      group: ${{ needs.create_pull_request.outputs.head_ref }} # A single build running per branch
      cancel-in-progress: true
    with:
      app_version: v${{ needs.determine_app_version.outputs.app_version }}
      commit_sha: ${{ github.sha }}
      cache_tag: pr-${{ needs.create_pull_request.outputs.number }}
      target: rc
  push_to_sandbox:
    name: Push to sandbox
    needs: [determine_app_version, build_image]
    uses: ./.github/workflows/push-docker-image-to-ecr-registry.yml
    secrets: inherit
    with:
      environment: sandbox
      source_image: ${{ github.event.repository.name }}:${{ github.sha }}
      destination_image: ${{ github.event.repository.name }}:${{ needs.determine_app_version.outputs.app_version }}
  push_to_production:
    name: Push to production
    needs: [determine_app_version, build_image]
    uses: ./.github/workflows/push-docker-image-to-ecr-registry.yml
    secrets: inherit
    with:
      environment: production
      source_image: ${{ github.event.repository.name }}:${{ github.sha }}
      destination_image: ${{ github.event.repository.name }}:${{ needs.determine_app_version.outputs.app_version }}
  generate_summary:
    name: Generate summary
    needs: [determine_app_version, build_image, push_to_sandbox, push_to_production, create_pull_request]
    runs-on: ubuntu-latest
    steps:
      - name: Generate summary
        run: |
          echo "Pull Request for [${{ needs.create_pull_request.outputs.title }}](https://github.com/${{ github.repository }}/pull/${{ needs.create_pull_request.outputs.number }}) has been created ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "Image tagged **v${{ needs.determine_app_version.outputs.app_version }}** has been built and pushed to the registry." >> $GITHUB_STEP_SUMMARY
